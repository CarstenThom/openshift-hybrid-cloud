# sets the apiversion to use for rbac-resources. Change to `authorization.openshift.io` for openshift
#rbacApiVersion: rbac.authorization.k8s.io
rbacApiVersion: authorization.openshift.io
# namespace is the namespace the operators will _run_
namespace: openshift
# watchedNamespaces is a comma-separated list of namespaces the operators will _watch_ for OLM resources.
# Omit to enable OLM in all namespaces
watchedNamespaces: openshift
# catalog_namespace is the namespace where the catalog operator will look for global catalogs.
# entries in global catalogs can be resolved in any watched namespace
catalog_namespace: openshift

# OLM operator run configuration
alm:
  # OLM operator doesn't do any leader election (yet), set to 1
  replicaCount: 1
  # The image to run. If not building a local image, use sha256 image references
  image:
    ref: quay.io/coreos/olm@sha256:d2e51372b3251321c38d2159e8060fe0bf2f3eeb60a4a3cd53fbee3e1cdd5756
    # 0.6.0
    pullPolicy: IfNotPresent
  service:
    # port for readiness/liveness probes
    internalPort: 8080

# catalog operator run configuration
catalog:
  # Catalog operator doesn't do any leader election (yet), set to 1
  replicaCount: 1
  # The image to run. If not building a local image, use sha256 image references
  image:
    ref: quay.io/coreos/catalog@sha256:cc60359f7fdeaf71e4d989b470dd8c35c693756b5f24485b0f3df6612a730101
    # 0.6.0
    pullPolicy: IfNotPresent
  service:
    # port for readiness/liveness probes
    internalPort: 8080

# alm service broker run configuration
servicebroker:
  # OLM Service Broker doesn't need to be HA; scale with load
  replicaCount: 1
  image:
    ref: quay.io/coreos/olm-service-broker:openshift
    pullPolicy: IfNotPresent
  service:
    # port for readiness/liveness probes
    internalPort: 8080
    # port exposing OLM's service broker API
    brokerPort: 8005

# To configure a release of OLM for installation in a cluster:
# Create a my-values.yaml like the example above with the desired configuration or choose an existing one from this repository. The latest production values can be found in deploy/tectonic-alm-operator/values.yaml.
# Generate deployment files from the templates and the my-values.yaml using package-release.sh
# first arg must be a semver-compatible version string
# second arg is the output directory
# third arg is the values.yaml file
# ./scripts/package-release.sh 1.0.0-myolm ./my-olm-deployment my-olm-values.yaml
# Deploy to kubernetes: oc apply -f ./my-olm-deployment/templates/
# The above steps are automated for official releases with make ver=0.3.0 release, which will output new versions of manifests in deploy/tectonic-alm-operator/manifests/$(ver).

